#!/bin/bash
#Copyright 2005-2017, Lime Technology
#License: GPLv2 only

# This is the 'mover' script used for moving files between the cache disk and main array.
# It is typically invoked via cron.

# First we check if it's valid for this script run: there must be a cache disk present and
# an instance of the script must not already be running.

# Next, check each of the top-level directories (shares) on the cache disk.
# If, and only if, the 'Use Cache' setting for the share is set to "yes", we use 'find' to
# list the objects (files and directories) of that share directory, moving them to the array.
# Next, we check each of the top-level directories (shares) on each array disk (in sorted order).
# If, and only if, the 'Use Cache' setting for the share is set to "prefer", we use 'find' to
# list the objects (files and directories) of that share directory, moving them to the cache disk.

# The script is set up so that hidden directories (i.e., directory names beginning with a '.'
# character) at the topmost level of the cache or an array disk are not moved.  This behavior
# can be turned off by uncommenting the following line:
# shopt -s dotglob

# Files at the top level of the cache or an array disk are never moved to the array.

# The 'find' command generates a list of all files and directories of a share.
# For each file, if the file is not "in use" by any process (as detected by 'fuser' command),
# then the file is moved, and upon success, deleted from the source disk.  If the file already
# exists on the target, it is not moved and the sourceis not deleted.  All meta-data of moved
# files/directories is preserved: permissions, ownership, extended attributes, and access/modified
# timestamps.

# If an error occurs in copying a file, the partial file, if present, is deleted and the
# operation continues on to the next file.

PIDFILE="/var/run/mover.pid"
CFGFILE="/boot/config/share.cfg"
LOGLEVEL=0
AGE=$2

start() {
  if [ -f $PIDFILE ]; then
    if ps h $(cat $PIDFILE) | grep mover ; then
        echo "mover: already running"
        exit 1
    fi
  fi

  # Only start if cache enabled and present
  if [ -f $CFGFILE ]; then
    if ! grep -qs 'shareCacheEnabled="yes"' $CFGFILE ; then
      echo "mover: cache not enabled"
      exit 2
    fi
    if grep -qs 'shareMoverLogging="yes"' $CFGFILE ; then
      LOGLEVEL=1
    fi
  fi
  if ! mountpoint -q /mnt/user0 ; then
    echo "mover: cache not present, or only cache present"
    exit 3
  fi

  echo $$ >/var/run/mover.pid
  [[ $LOGLEVEL -gt 0 ]] && echo "mover: started"

  shopt -s nullglob

  # Check for objects to move from cache to array
  for SHAREPATH in /mnt/cache/*/ ; do
    SHARE=$(basename "$SHAREPATH")
	echo "Share: $SHAREPATH"
    if grep -qs 'shareUseCache="yes"' "/boot/config/shares/${SHARE}.cfg" ; then
	echo "Doing Find for Mover now!"
	echo "Age ${AGE}"
      find "${SHAREPATH%/}" -depth -type f -mtime +${AGE} | /usr/local/sbin/move -d $LOGLEVEL
	#find "${SHAREPATH%/}" -depth -type f -mtime +${AGE}
    fi
  done

  # Check for objects to move from array to cache
#  for SHAREPATH in $(ls -dv /mnt/disk[0-9]*/*/) ; do
#    SHARE=$(basename "$SHAREPATH")
#    if grep -qs 'shareUseCache="prefer"' "/boot/config/shares/${SHARE}.cfg" ; then
#      find "${SHAREPATH%/}" -depth | /usr/local/sbin/move -d $LOGLEVEL
#    fi
#  done

  rm -f $PIDFILE
  [[ $LOGLEVEL -gt 0 ]] && echo "mover: finished"
}

killtree() {
  local pid=$1 child
    
  for child in $(pgrep -P $pid); do
    killtree $child
  done
  [ $pid -ne $$ ] && kill -TERM $pid
}

# Caution: stopping mover like this can lead to partial files on the destination
# and possible incomplete hard link transfer.  Not recommended to do this.
stop() {
  if [ ! -f $PIDFILE ]; then
    echo "mover: not running"
    exit 0
  fi
  killtree $(cat $PIDFILE)
  sleep 2
  rm -f $PIDFILE
  echo "mover: stopped"
}

case $1 in
start)
  start
  ;;
stop)
  stop
  ;;
status)
  [ -f $PIDFILE ]
  ;;
*)
  # Default is "start"
  # echo "Usage: $0 (start|stop|status)"
  start
  ;;
esac
