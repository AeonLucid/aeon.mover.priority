#!/bin/bash
#Copyright 2005-2017, Lime Technology
#License: GPLv2 only

# This is the 'mover' script used for moving files between the cache disk and main array.
# It is typically invoked via cron.

# First we check if it's valid for this script run: there must be a cache disk present and
# an instance of the script must not already be running.

# Next, check each of the top-level directories (shares) on the cache disk.
# If, and only if, the 'Use Cache' setting for the share is set to "yes", we use 'find' to
# list the objects (files and directories) of that share directory, moving them to the array.
# Next, we check each of the top-level directories (shares) on each array disk (in sorted order).
# If, and only if, the 'Use Cache' setting for the share is set to "prefer", we use 'find' to
# list the objects (files and directories) of that share directory, moving them to the cache disk.

# The script is set up so that hidden directories (i.e., directory names beginning with a '.'
# character) at the topmost level of the cache or an array disk are not moved.  This behavior
# can be turned off by uncommenting the following line:
# shopt -s dotglob

# Files at the top level of the cache or an array disk are never moved to the array.

# The 'find' command generates a list of all files and directories of a share.
# For each file, if the file is not "in use" by any process (as detected by 'fuser' command),
# then the file is moved, and upon success, deleted from the source disk.  If the file already
# exists on the target, it is not moved and the sourceis not deleted.  All meta-data of moved
# files/directories is preserved: permissions, ownership, extended attributes, and access/modified
# timestamps.

# If an error occurs in copying a file, the partial file, if present, is deleted and the
# operation continues on to the next file.

PIDFILE="/var/run/mover.pid"
CFGFILE="/boot/config/share.cfg"
LOGLEVEL=0
AGE=0
SIZE=0
SPARSENESS=0
SKIPFILESLIST=""
SKIPFILETYPES=""
BEFORESCRIPT=""
AFTERSCRIPT=""
FINDSTR=""
SIZEFINDSTR=""

mvlogger () {

	if [ $LOGLEVEL = 1 ] ; then
		echo "mvlogger: $1"
	fi

}

mvallfrompool() {
	mvlogger "Checking to see if we should all files from share."
	mvlogger "Move All Cache Threshold: $CACHETHRESH"

	for POOL in /boot/config/pools/*.cfg ; do
		# Check to see if each pool is over the move all cache-yes shares files to array
		POOLPATH=/mnt/$(basename "$POOL" .cfg)
		POOLPCTUSEDA=`df --output=pcent $POOLPATH | tail -n 1 | tr -d '%'`
		mvlogger "$POOLPATH PCT USED: $POOLPCTUSEDA"

		if [ $POOLPCTUSEDA -gt $CACHETHRESH ] ; then
			mvlogger "Pool $POOLPATH is above 'move all' percentage, moving all cache-yes shares to array"

			for SHAREPATH in /mnt/$(basename "$POOL" .cfg)/*/ ; do
				SHARE=$(basename "$SHAREPATH")
				if grep -qs 'shareUseCache="yes"' "/boot/config/shares/${SHARE}.cfg" ; then
					MVALLSTR="find ${SHAREPATH%/} -depth"

		                	if [ "$TESTMODE" = "yes" ] ; then
		                        	mvlogger "Running in Test Mode: $MVALLSTR"
        		                        eval "$MVALLSTR"
                		        else
                        		        mvlogger "Not in Test mode"
						MVALLSTR+=" | /usr/local/sbin/move -d $LOGLEVEL"
						#Add Mover to find string
                          			mvlogger "Complete Mover Command: $MVALLSTR"
                                		#####eval "$FINDSTR"
						eval "$MVALLSTR"
                        		fi

				fi
			done
		fi
	done

	mvlogger "Done checking Move All from Share"


}


if [ -f $CFGFILE ]; then
	if ! grep -qs 'shareCacheEnabled="yes"' $CFGFILE ; then
		echo "mover: cache not enabled"
		exit 2
	fi
	if grep -qs 'shareMoverLogging="yes"' $CFGFILE ; then
		LOGLEVEL=1
		echo "Log Level: $LOGLEVEL"
	fi
fi

mvlogger  "*********************************MOVER START*******************************"

#Test input variables
# 1: start/stop/kill 2: Age of files 3: Size of files 4: Sparness amount 5: Exclude file list file path
if [ -z "$2" ] ; then
        mvlogger "No Age  Argument Supplied"
        AGE=0
else
	mvlogger "Age supplied $2"
        AGE=$2
fi


if [ -z "$3" ] ; then
	mvlogger "No Size Argument Supplied"
	SIZE=0	
else
	mvlogger "Size supplied"
	SIZE=$3
fi

if [ -z "$4" ] ; then
	mvlogger "No Sparness Argument Supplied"
	SPARSENESS=0	
else
	mvlogger "Sparness supplied"
	SPARSENESS=$4
fi

if [ -z "$5" ] ; then
	mvlogger "No Skipfiles Argument Supplied"
	SKIPFILESLIST=""	
else
	###echo "Skipfilelist supplied"
	###SKIPFILESLIST=chomp($5)
	SKIPFILESLIST=$5
	SKIPFILESLIST=`echo $SKIPFILESLIST | sed 's/ *$//g'`
	mvlogger "SKIP FILE: $SKIPFILESLIST"
fi

if [ -z "$6" ] ; then
        mvlogger "No Skipfiles Argument Supplied"
        SKIPFILETYPES=""
else
        ###echo "Skipfiletypes supplied"
        SKIPFILETYPES=$6
        SKIPFILETYPES=`echo $SKIPFILETYPES | sed 's/ *$//g'`
        mvlogger "SKIP FILE TYPES: $SKIPFILETYPES"
fi

if [ -z "$7" ] ; then
	mvlogger "No Before Script Argument Supplied"
	BEFORESCRIPT=""
else
	BEFORESCRIPT=$7
	mvlogger "BEFORESCRIPT: $BEFORESCRIPT"
fi

if [ -z "$8" ] ; then
	mvlogger "No After Script Argument Supplied"
	AFTERSCRIPT=""
else
	AFTERSCRIPT=$8
	mvlogger "AFTERSCRIPT: $AFTERSCRIPT"
fi

if [ -z "$9" ] ; then
	mvlogger "No CTIME Argument Supplied"
	CTIMEA=""
else
	CTIMEA=$9
	mvlogger "CTIME Argument: $CTIMEA"
fi

if [ -z "${10}" ] ; then
        mvlogger "No Original Mover Threshold Percent Supplied"
        CACHETHRESH=""
else
        CACHETHRESH=${10}
        mvlogger "CACHE THRESH to Move all Cache-Yes shares to array: $CACHETHRESH"
fi

if [ -z "${11}" ] ; then
        mvlogger "No Test Mode Argument Supplied"
        TESTMODE=""
else
        TESTMODE=${11}
        mvlogger "Test Mode Argument: $TESTMODE"
fi

if [ -z "${12}" ] ; then
        mvlogger "No Ignore Hidden Files Argument Supplied"
        HIDDENFILES=""
else
        HIDDENFILES=${12}
        mvlogger "Ignore Hidden Files Argument: $HIDDENFILES"
fi




start() {
  if [ -f $PIDFILE ]; then
    if ps h $(cat $PIDFILE) | grep mover ; then
        echo "mover: already running"
        exit 1
    fi
  fi

  # Only start if cache enabled and present
  if ! grep -qs 'shareCacheEnabled="yes"' $CFGFILE ; then
    echo "mover: cache not enabled"
    exit 2
  fi

  if ! mountpoint -q /mnt/user0 ; then
    echo "mover: cache not present, or only cache present"
    exit 3
  fi


  echo $$ >/var/run/mover.pid
  [[ $LOGLEVEL -gt 0 ]] && echo "mover: started"

  shopt -s nullglob

    #Run mover before script if specified.
    if [ -z $BEFORESCRIPT ] ; then
	mvlogger "No Script to Run."
    else
    	if [ -f $BEFORESCRIPT ] ; then
		mvlogger "Before script will be executed: $BEFORESCRIPT"
		eval "$BEFORESCRIPT"
	fi
    fi

    #Check to see if we should move all files based on total cache pool levels.	
    if [ "$CACHETHRESH" = "" ] ; then
	mvlogger "CACHETHRESH is blank"
    else
	mvlogger "CACHETHRESH: $CACHETHRESH"
	#CALL FUNCTION
	mvallfrompool
    fi



    for SHARECFG in /boot/config/shares/* ; do 


	if grep -qs 'shareUseCache="yes"' "$SHARECFG" ; then
    		#Start Creating the Find String.
		#Sharename
		###########SHARENAME="$(basename $SHARECFG .cfg)"
		SHARENAME="$(basename "$SHARECFG" .cfg)"
		mvlogger "Share Name Only: $SHARENAME"

                CACHEPOOLNAME=`cat "$SHARECFG" | grep shareCachePool | cut -d'=' -f 2 | tr -d '"' | tr -d '\r'`
                mvlogger "Cache Pool Name: $CACHEPOOLNAME "

		if [ -z "$CACHEPOOLNAME" ] ; then
                	mvlogger "No shareCachePool entry found in config file, defaulting to cache"
                        CACHEPOOLNAME="cache"
                fi

		### Add Check to see if we need to move based on %, else exit.
		PCTLIMIT=`cat /boot/config/plugins/ca.mover.tuning/ca.mover.tuning.cfg | grep $CACHEPOOLNAME"=" | rev | cut -c2-3 | rev`
		mvlogger "$CACHEPOOLNAME Threshold Pct: $PCTLIMIT"

		### Read in default threshold limit.
		DFTPCTLIMIT=`cat /boot/config/plugins/ca.mover.tuning/ca.mover.tuning.cfg | grep threshold"=" | rev | cut -c2-3 | rev | tr -d '"'`
		mvlogger "OVERALL Threshold: $DFTPCTLIMIT"

		SHAREPATH="/mnt/$CACHEPOOLNAME/$SHARENAME"
		mvlogger "Share Path: $SHAREPATH"	


		#Find the current percent of used size of pool.
		POOLPCTUSED=`df --output=pcent /mnt/$CACHEPOOLNAME | tail -n 1 | tr -d '%'`
		mvlogger "Pool Pct Used: $POOLPCTUSED %"

		#Determine which percent limit we are going to use, in case ca.mover.tuning.cfg does not have a cachepool percent limit entry.
		if [ -z "$PCTLIMIT" ] ; then
			DEFAULTTHRESHOLD=$DFTPCTLIMIT
			mvlogger "DFTPCT LIMIT USED FOR SETTING: $DFTPCTLIMIT"

		else
			DEFAULTTHRESHOLD=$PCTLIMIT
			mvlogger "PCT LIMIT USED: $PCTLIMIT" 

		fi
		mvlogger "Threshold Used: $DEFAULTTHRESHOLD"


		if [ "$SHAREPATH" = "/mnt/cache" ] ; then
			echo "Exiting, can't determine cache name used"

		elif [ $POOLPCTUSED -gt $DEFAULTTHRESHOLD ] ; then
			
                        #Base Find String
                        FINDSTR="find \"$SHAREPATH\" -depth"
			SIZEFINDSTR="find \"$SHAREPATH\" -depth -type f"

			#Add Age variables to find string
			if [ "$AGE" -ge 1 ] ; then 
				mvlogger "Adding Age"
				mvlogger "Age ${AGE}"
				RAGE=$((AGE-1))

				if [ "$CTIMEA" == "yes" ] ; then
					FINDSTR+=" -ctime +$RAGE"
					SIZEFINDSTR+=" -ctime +$RAGE"

				else 
					FINDSTR+=" -mtime +$RAGE"
					SIZEFINDSTR+=" -mtime +$RAGE"
				fi
			fi
			
			#add -print0 to sizing find string
			#Removing this as we can't grab the size of the string with or without it.
			######SIZEFINDSTR+=" -print0"


			#Add Size to find string
			if [ "$SIZE" -gt 0 ] ; then 
				mvlogger "Adding Size"
				mvlogger "Size ${SIZE}"

				FINDSTR+=" -size +${SIZE}M"
                                SIZEFINDSTR+=" -size +${SIZE}M"
			fi

			#Add Ignore Hidden Files to find string
                        if [ "$HIDDENFILES" == "yes" ] ; then
                                mvlogger "Adding Ignore Hidden Files"
                                mvlogger "IgnoreHiddenFiles: ${HIDDENFILES}"

				FINDSTR+=" -not -path '*/\.*'"
                                SIZEFINDSTR+=" -not -path '*/\.*'"
                        fi


			#Add Size to find string
			if [ "$SPARSENESS" -gt 0 ] ; then 
				mvlogger "Adding Sparseness"
				mvlogger "Size ${SPARSENESS}"

				FINDSTR+=" -printf '%S:%p\0' | awk -v RS='\0' -F : '\$1 > 0.$SPARSENESS {sub(/^[^:]*:/, \"\"); print}'"
				SIZEFINDSTR+=" -printf '%S:%p\0' | awk -v RS='\0' -F : '\$1 > 0.$SPARSENESS {sub(/^[^:]*:/, \"\"); print}'"
			fi



			#Add additional commands
			#Add Skipfilelist to find string
			if [ -n "$SKIPFILESLIST" ]; then 
				mvlogger "Adding Skip File List"
				mvlogger "Skip File List Path: ${SKIPFILESLIST}"

				FINDSTR+=" | grep -vFf '$SKIPFILESLIST'"
				SIZEFINDSTR+=" | grep -vFf '$SKIPFILESLIST'"
			fi

			mvlogger "Skipfiletypes string: $FINDSTR"    

			if [ -n "$SKIPFILETYPES" ]; then 
				FINDSTR+=" | grep -v"
				SIZEFINDSTR+=" | grep -v"
				for i in $(echo $SKIPFILETYPES | sed "s/,/ /g")
				do
					FINDSTR+=" -e '$i'"
					SIZEFINDSTR+=" -e '$i'"
				done
			fi


			if [ "$TESTMODE" = "yes" ] ; then
			####removing sizing as I'm having problems with the print0 statement working with exclude file types	
			####	mvlogger "Expected Size of all files for this cache to be moved:"
				SIZEFINDSTR+=" | du -shc --files0-from - | tail -n1"
				mvlogger "$SIZEFINDSTR"
			####	eval "$SIZEFINDSTR"
				mvlogger "Running in Test Mode: $FINDSTR"
				eval "$FINDSTR"
			else
				mvlogger "Not in Test mode"
				#Add Mover to find string
				FINDSTR+=" | /usr/local/sbin/move -d $LOGLEVEL"
                                mvlogger "Complete Mover Command: $FINDSTR"
				eval "$FINDSTR"
			fi

		else
			mvlogger "Mover not Needed."
			MOVENOTNEEDED="Mover Not Needed"
		fi

	fi
    done

  # Check for objects to move from array to pools
  for SHAREPATH in $(ls -dv /mnt/disk[0-9]*/*/) ; do
    SHARE=$(basename "$SHAREPATH")
    if grep -qs 'shareUseCache="prefer"' "/boot/config/shares/${SHARE}.cfg" ; then
      eval "$(grep -s shareCachePool /boot/config/shares/${SHARE}.cfg | tr -d '\r')"
      if [[ -z "$shareCachePool" ]]; then
        shareCachePool="cache"
      fi
      if [[ -d "/mnt/$shareCachePool" ]]; then
	if [ "$TESTMODE" = "yes" ] ; then
		mvlogger "Moving files from Array to Cache!"
		find "${SHAREPATH%/}" -depth	
	else
        	find "${SHAREPATH%/}" -depth | /usr/local/sbin/move -d $LOGLEVEL
	fi
      fi
    fi
  done

  rm -f $PIDFILE
  [[ $LOGLEVEL -gt 0 ]] && echo "mover: finished"

  #Run mover after script if specified.
  if [ -z $AFTERSCRIPT ] ; then
	mvlogger "No After Script to Run."
  else
	if [ -f $AFTERSCRIPT ] ; then
		mvlogger "After script will be executed: $AFTERSCRIPT"
      		eval "$AFTERSCRIPT"
	fi
  fi

}

killtree() {
  local pid=$1 child
    
  for child in $(pgrep -P $pid); do
    killtree $child
  done
  [ $pid -ne $$ ] && kill -TERM $pid
}

# Caution: stopping mover like this can lead to partial files on the destination
# and possible incomplete hard link transfer.  Not recommended to do this.
stop() {
  if [ ! -f $PIDFILE ]; then
    echo "mover: not running"
    exit 0
  fi
  killtree $(cat $PIDFILE)
  sleep 2
  rm -f $PIDFILE
  echo "mover: stopped"
}

case $1 in
start)
  start
  ;;
stop)
  stop
  ;;
status)
  [ -f $PIDFILE ]
  ;;
*)
  # Default is "start"
  # echo "Usage: $0 (start|stop|status)"
  start
  ;;
esac

